-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module GithubNoFormat.Object.SmimeSignature exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import GithubNoFormat.Object
import GithubNoFormat.Interface
import GithubNoFormat.Union
import GithubNoFormat.Scalar
import GithubNoFormat.InputObject
import GithubNoFormat.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import GithubNoFormat.Enum.GitSignatureState
{-| Email used to sign this object.
-}
email : SelectionSet (String) GithubNoFormat.Object.SmimeSignature
email =
      Object.selectionForField "(String)" "email" [] (Decode.string)


{-| True if the signature is valid and verified by GitHub.
-}
isValid : SelectionSet (Bool) GithubNoFormat.Object.SmimeSignature
isValid =
      Object.selectionForField "(Bool)" "isValid" [] (Decode.bool)


{-| Payload for GPG signing object. Raw ODB object without the signature header.
-}
payload : SelectionSet (String) GithubNoFormat.Object.SmimeSignature
payload =
      Object.selectionForField "(String)" "payload" [] (Decode.string)


{-| ASCII-armored signature header from object.
-}
signature : SelectionSet (String) GithubNoFormat.Object.SmimeSignature
signature =
      Object.selectionForField "(String)" "signature" [] (Decode.string)


{-| GitHub user corresponding to the email signing this commit.
-}
signer : SelectionSet decodesTo GithubNoFormat.Object.User
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.SmimeSignature
signer object____ =
      Object.selectionForCompositeField "signer" [] (object____) (Basics.identity >> Decode.nullable)


{-| The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
-}
state : SelectionSet (GithubNoFormat.Enum.GitSignatureState.GitSignatureState) GithubNoFormat.Object.SmimeSignature
state =
      Object.selectionForField "(Enum.GitSignatureState.GitSignatureState)" "state" [] (GithubNoFormat.Enum.GitSignatureState.decoder)
