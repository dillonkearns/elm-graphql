-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module GithubNoFormat.Object.GitActor exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import GithubNoFormat.Object
import GithubNoFormat.Interface
import GithubNoFormat.Union
import GithubNoFormat.Scalar
import GithubNoFormat.InputObject
import GithubNoFormat.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)

type alias AvatarUrlOptionalArguments = { size : OptionalArgument (Int) }

{-| A URL pointing to the author's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments)
 -> SelectionSet (GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Object.GitActor
avatarUrl fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { size = Absent }

        optionalArgs____ =
            [ Argument.optional "size" filledInOptionals____.size (Encode.int) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForField "(ScalarCodecs.Uri)" "avatarUrl" optionalArgs____ (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The timestamp of the Git action (authoring or committing).
-}
date : SelectionSet (Maybe GithubNoFormat.ScalarCodecs.GitTimestamp) GithubNoFormat.Object.GitActor
date =
      Object.selectionForField "(Maybe ScalarCodecs.GitTimestamp)" "date" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecGitTimestamp |> .decoder |> Decode.nullable)


{-| The email in the Git commit.
-}
email : SelectionSet (Maybe String) GithubNoFormat.Object.GitActor
email =
      Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


{-| The name in the Git commit.
-}
name : SelectionSet (Maybe String) GithubNoFormat.Object.GitActor
name =
      Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| The GitHub user corresponding to the email field. Null if no such user exists.
-}
user : SelectionSet decodesTo GithubNoFormat.Object.User
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.GitActor
user object____ =
      Object.selectionForCompositeField "user" [] (object____) (Basics.identity >> Decode.nullable)
