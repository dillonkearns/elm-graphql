-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module GithubNoFormat.Object.Repository exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import GithubNoFormat.Object
import GithubNoFormat.Interface
import GithubNoFormat.Union
import GithubNoFormat.Scalar
import GithubNoFormat.InputObject
import GithubNoFormat.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import GithubNoFormat.Enum.CollaboratorAffiliation
import GithubNoFormat.Enum.RepositoryPrivacy
import GithubNoFormat.Enum.RepositoryAffiliation
import GithubNoFormat.Enum.IssueState
import GithubNoFormat.Enum.MilestoneState
import GithubNoFormat.Enum.ProjectState
import GithubNoFormat.Enum.PullRequestState
import GithubNoFormat.Enum.OrderDirection
import GithubNoFormat.Enum.RepositoryLockReason
import GithubNoFormat.Enum.RepositoryPermission
import GithubNoFormat.Enum.SubscriptionState
type alias AssignableUsersOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of users that can be assigned to issues in this repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
assignableUsers : (AssignableUsersOptionalArguments -> AssignableUsersOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.UserConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
assignableUsers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "assignableUsers" optionalArgs____ (object____) (Basics.identity)


{-| Returns the code of conduct for this repository
-}
codeOfConduct : SelectionSet decodesTo GithubNoFormat.Object.CodeOfConduct
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
codeOfConduct object____ =
      Object.selectionForCompositeField "codeOfConduct" [] (object____) (Basics.identity >> Decode.nullable)


type alias CollaboratorsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , affiliation : OptionalArgument GithubNoFormat.Enum.CollaboratorAffiliation.CollaboratorAffiliation }

{-| A list of collaborators associated with the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - affiliation - Collaborators affiliation level with a repository.

-}
collaborators : (CollaboratorsOptionalArguments -> CollaboratorsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.RepositoryCollaboratorConnection
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
collaborators fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, affiliation = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "affiliation" filledInOptionals____.affiliation ((Encode.enum GithubNoFormat.Enum.CollaboratorAffiliation.toString)) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "collaborators" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)


type alias CommitCommentsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of commit comments associated with the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
commitComments : (CommitCommentsOptionalArguments -> CommitCommentsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.CommitCommentConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
commitComments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "commitComments" optionalArgs____ (object____) (Basics.identity)


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet GithubNoFormat.ScalarCodecs.DateTime GithubNoFormat.Object.Repository
createdAt =
      Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
@deprecated Exposed database IDs will eventually be removed in favor of global Relay IDs. Use `Node.id` instead. Removal on 2018-07-01 UTC.
-}
databaseId : SelectionSet (Maybe Int) GithubNoFormat.Object.Repository
databaseId =
      Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The Ref associated with the repository's default branch.
-}
defaultBranchRef : SelectionSet decodesTo GithubNoFormat.Object.Ref
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
defaultBranchRef object____ =
      Object.selectionForCompositeField "defaultBranchRef" [] (object____) (Basics.identity >> Decode.nullable)


type alias DeployKeysOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of deploy keys that are on this repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
deployKeys : (DeployKeysOptionalArguments -> DeployKeysOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.DeployKeyConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
deployKeys fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "deployKeys" optionalArgs____ (object____) (Basics.identity)


type alias DeploymentsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , environments : OptionalArgument (List String) }

{-| Deployments associated with the repository

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - environments - Environments to list deployments for

-}
deployments : (DeploymentsOptionalArguments -> DeploymentsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.DeploymentConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
deployments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, environments = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "environments" filledInOptionals____.environments (Encode.string |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "deployments" optionalArgs____ (object____) (Basics.identity)


{-| The description of the repository.
-}
description : SelectionSet (Maybe String) GithubNoFormat.Object.Repository
description =
      Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The description of the repository rendered to HTML.
-}
descriptionHTML : SelectionSet GithubNoFormat.ScalarCodecs.Html GithubNoFormat.Object.Repository
descriptionHTML =
      Object.selectionForField "ScalarCodecs.Html" "descriptionHTML" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The number of kilobytes this repository occupies on disk.
-}
diskUsage : SelectionSet (Maybe Int) GithubNoFormat.Object.Repository
diskUsage =
      Object.selectionForField "(Maybe Int)" "diskUsage" [] (Decode.int |> Decode.nullable)


{-| Returns how many forks there are of this repository in the whole network.
-}
forkCount : SelectionSet Int GithubNoFormat.Object.Repository
forkCount =
      Object.selectionForField "Int" "forkCount" [] (Decode.int)


type alias ForksOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , privacy : OptionalArgument GithubNoFormat.Enum.RepositoryPrivacy.RepositoryPrivacy
 , orderBy : OptionalArgument GithubNoFormat.InputObject.RepositoryOrder
 , affiliations : OptionalArgument (List (Maybe GithubNoFormat.Enum.RepositoryAffiliation.RepositoryAffiliation))
 , isLocked : OptionalArgument Bool }

{-| A list of direct forked repositories.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Affiliation options for repositories returned from the connection
  - isLocked - If non-null, filters repositories according to whether they have been locked

-}
forks : (ForksOptionalArguments -> ForksOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.RepositoryConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
forks fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, privacy = Absent, orderBy = Absent, affiliations = Absent, isLocked = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "privacy" filledInOptionals____.privacy ((Encode.enum GithubNoFormat.Enum.RepositoryPrivacy.toString)), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeRepositoryOrder), Argument.optional "affiliations" filledInOptionals____.affiliations ((Encode.enum GithubNoFormat.Enum.RepositoryAffiliation.toString) |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals____.isLocked (Encode.bool) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "forks" optionalArgs____ (object____) (Basics.identity)


{-| Indicates if the repository has issues feature enabled.
-}
hasIssuesEnabled : SelectionSet Bool GithubNoFormat.Object.Repository
hasIssuesEnabled =
      Object.selectionForField "Bool" "hasIssuesEnabled" [] (Decode.bool)


{-| Indicates if the repository has wiki feature enabled.
-}
hasWikiEnabled : SelectionSet Bool GithubNoFormat.Object.Repository
hasWikiEnabled =
      Object.selectionForField "Bool" "hasWikiEnabled" [] (Decode.bool)


{-| The repository's URL.
-}
homepageUrl : SelectionSet (Maybe GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Object.Repository
homepageUrl =
      Object.selectionForField "(Maybe ScalarCodecs.Uri)" "homepageUrl" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


id : SelectionSet GithubNoFormat.ScalarCodecs.Id GithubNoFormat.Object.Repository
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Indicates if the repository is unmaintained.
-}
isArchived : SelectionSet Bool GithubNoFormat.Object.Repository
isArchived =
      Object.selectionForField "Bool" "isArchived" [] (Decode.bool)


{-| Identifies if the repository is a fork.
-}
isFork : SelectionSet Bool GithubNoFormat.Object.Repository
isFork =
      Object.selectionForField "Bool" "isFork" [] (Decode.bool)


{-| Indicates if the repository has been locked or not.
-}
isLocked : SelectionSet Bool GithubNoFormat.Object.Repository
isLocked =
      Object.selectionForField "Bool" "isLocked" [] (Decode.bool)


{-| Identifies if the repository is a mirror.
-}
isMirror : SelectionSet Bool GithubNoFormat.Object.Repository
isMirror =
      Object.selectionForField "Bool" "isMirror" [] (Decode.bool)


{-| Identifies if the repository is private.
-}
isPrivate : SelectionSet Bool GithubNoFormat.Object.Repository
isPrivate =
      Object.selectionForField "Bool" "isPrivate" [] (Decode.bool)


type alias IssueRequiredArguments = { number : Int }

{-| Returns a single issue from the current repository by number.

  - number - The number for the issue to be returned.

-}
issue : IssueRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Issue
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
issue requiredArgs____ object____ =
      Object.selectionForCompositeField "issue" [ Argument.required "number" requiredArgs____.number (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias IssueOrPullRequestRequiredArguments = { number : Int }

{-| Returns a single issue-like object from the current repository by number.

  - number - The number for the issue to be returned.

-}
issueOrPullRequest : IssueOrPullRequestRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Union.IssueOrPullRequest
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
issueOrPullRequest requiredArgs____ object____ =
      Object.selectionForCompositeField "issueOrPullRequest" [ Argument.required "number" requiredArgs____.number (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias IssuesOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , labels : OptionalArgument (List String)
 , orderBy : OptionalArgument GithubNoFormat.InputObject.IssueOrder
 , states : OptionalArgument (List GithubNoFormat.Enum.IssueState.IssueState) }

{-| A list of issues that have been opened in the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - labels - A list of label names to filter the pull requests by.
  - orderBy - Ordering options for issues returned from the connection.
  - states - A list of states to filter the issues by.

-}
issues : (IssuesOptionalArguments -> IssuesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.IssueConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
issues fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, labels = Absent, orderBy = Absent, states = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "labels" filledInOptionals____.labels (Encode.string |> Encode.list), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeIssueOrder), Argument.optional "states" filledInOptionals____.states ((Encode.enum GithubNoFormat.Enum.IssueState.toString) |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "issues" optionalArgs____ (object____) (Basics.identity)


type alias LabelRequiredArguments = { name : String }

{-| Returns a single label by name

  - name - Label name

-}
label : LabelRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Label
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
label requiredArgs____ object____ =
      Object.selectionForCompositeField "label" [ Argument.required "name" requiredArgs____.name (Encode.string) ] (object____) (Basics.identity >> Decode.nullable)


type alias LabelsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , query : OptionalArgument String }

{-| A list of labels associated with the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - query - If provided, searches labels by name and description.

-}
labels : (LabelsOptionalArguments -> LabelsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.LabelConnection
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
labels fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, query = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "query" filledInOptionals____.query (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "labels" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)


type alias LanguagesOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , orderBy : OptionalArgument GithubNoFormat.InputObject.LanguageOrder }

{-| A list containing a breakdown of the language composition of the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - orderBy - Order for connection

-}
languages : (LanguagesOptionalArguments -> LanguagesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.LanguageConnection
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
languages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeLanguageOrder) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "languages" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)


{-| The license associated with the repository
@deprecated Field `license` will be replaced by a more detailed license object. Use `Repository.licenseInfo` instead. Removal on 2018-07-01 UTC.
-}
license : SelectionSet (Maybe String) GithubNoFormat.Object.Repository
license =
      Object.selectionForField "(Maybe String)" "license" [] (Decode.string |> Decode.nullable)


{-| The license associated with the repository
-}
licenseInfo : SelectionSet decodesTo GithubNoFormat.Object.License
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
licenseInfo object____ =
      Object.selectionForCompositeField "licenseInfo" [] (object____) (Basics.identity >> Decode.nullable)


{-| The reason the repository has been locked.
-}
lockReason : SelectionSet (Maybe GithubNoFormat.Enum.RepositoryLockReason.RepositoryLockReason) GithubNoFormat.Object.Repository
lockReason =
      Object.selectionForField "(Maybe Enum.RepositoryLockReason.RepositoryLockReason)" "lockReason" [] (GithubNoFormat.Enum.RepositoryLockReason.decoder |> Decode.nullable)


type alias MentionableUsersOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of Users that can be mentioned in the context of the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
mentionableUsers : (MentionableUsersOptionalArguments -> MentionableUsersOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.UserConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
mentionableUsers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "mentionableUsers" optionalArgs____ (object____) (Basics.identity)


type alias MilestoneRequiredArguments = { number : Int }

{-| Returns a single milestone from the current repository by number.

  - number - The number for the milestone to be returned.

-}
milestone : MilestoneRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Milestone
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
milestone requiredArgs____ object____ =
      Object.selectionForCompositeField "milestone" [ Argument.required "number" requiredArgs____.number (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias MilestonesOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , states : OptionalArgument (List GithubNoFormat.Enum.MilestoneState.MilestoneState)
 , orderBy : OptionalArgument GithubNoFormat.InputObject.MilestoneOrder }

{-| A list of milestones associated with the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - states - Filter by the state of the milestones.
  - orderBy - Ordering options for milestones.

-}
milestones : (MilestonesOptionalArguments -> MilestonesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.MilestoneConnection
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
milestones fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, states = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "states" filledInOptionals____.states ((Encode.enum GithubNoFormat.Enum.MilestoneState.toString) |> Encode.list), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeMilestoneOrder) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "milestones" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)


{-| The repository's original mirror URL.
-}
mirrorUrl : SelectionSet (Maybe GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Object.Repository
mirrorUrl =
      Object.selectionForField "(Maybe ScalarCodecs.Uri)" "mirrorUrl" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| The name of the repository.
-}
name : SelectionSet String GithubNoFormat.Object.Repository
name =
      Object.selectionForField "String" "name" [] (Decode.string)


{-| The repository's name with owner.
-}
nameWithOwner : SelectionSet String GithubNoFormat.Object.Repository
nameWithOwner =
      Object.selectionForField "String" "nameWithOwner" [] (Decode.string)


type alias ObjectOptionalArguments = { oid : OptionalArgument GithubNoFormat.ScalarCodecs.GitObjectID
 , expression : OptionalArgument String }

{-| A Git object in the repository

  - oid - The Git object ID
  - expression - A Git revision expression suitable for rev-parse

-}
object : (ObjectOptionalArguments -> ObjectOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Interface.GitObject
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
object fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { oid = Absent, expression = Absent }

        optionalArgs____ =
            [ Argument.optional "oid" filledInOptionals____.oid ((GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapEncoder .codecGitObjectID)), Argument.optional "expression" filledInOptionals____.expression (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "object" optionalArgs____ (object____) (Basics.identity >> Decode.nullable)


{-| The User owner of the repository.
-}
owner : SelectionSet decodesTo GithubNoFormat.Interface.RepositoryOwner
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
owner object____ =
      Object.selectionForCompositeField "owner" [] (object____) (Basics.identity)


{-| The repository parent, if this is a fork.
-}
parent : SelectionSet decodesTo GithubNoFormat.Object.Repository
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
parent object____ =
      Object.selectionForCompositeField "parent" [] (object____) (Basics.identity >> Decode.nullable)


{-| The primary language of the repository's code.
-}
primaryLanguage : SelectionSet decodesTo GithubNoFormat.Object.Language
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
primaryLanguage object____ =
      Object.selectionForCompositeField "primaryLanguage" [] (object____) (Basics.identity >> Decode.nullable)


type alias ProjectRequiredArguments = { number : Int }

{-| Find project by number.

  - number - The project number to find.

-}
project : ProjectRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Project
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
project requiredArgs____ object____ =
      Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs____.number (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias ProjectsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , orderBy : OptionalArgument GithubNoFormat.InputObject.ProjectOrder
 , search : OptionalArgument String
 , states : OptionalArgument (List GithubNoFormat.Enum.ProjectState.ProjectState) }

{-| A list of projects under the owner.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.

-}
projects : (ProjectsOptionalArguments -> ProjectsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.ProjectConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
projects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, orderBy = Absent, search = Absent, states = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeProjectOrder), Argument.optional "search" filledInOptionals____.search (Encode.string), Argument.optional "states" filledInOptionals____.states ((Encode.enum GithubNoFormat.Enum.ProjectState.toString) |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "projects" optionalArgs____ (object____) (Basics.identity)


{-| The HTTP path listing repository's projects
-}
projectsResourcePath : SelectionSet GithubNoFormat.ScalarCodecs.Uri GithubNoFormat.Object.Repository
projectsResourcePath =
      Object.selectionForField "ScalarCodecs.Uri" "projectsResourcePath" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing repository's projects
-}
projectsUrl : SelectionSet GithubNoFormat.ScalarCodecs.Uri GithubNoFormat.Object.Repository
projectsUrl =
      Object.selectionForField "ScalarCodecs.Uri" "projectsUrl" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ProtectedBranchesOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of protected branches that are on this repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
protectedBranches : (ProtectedBranchesOptionalArguments -> ProtectedBranchesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.ProtectedBranchConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
protectedBranches fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "protectedBranches" optionalArgs____ (object____) (Basics.identity)


type alias PullRequestRequiredArguments = { number : Int }

{-| Returns a single pull request from the current repository by number.

  - number - The number for the pull request to be returned.

-}
pullRequest : PullRequestRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.PullRequest
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
pullRequest requiredArgs____ object____ =
      Object.selectionForCompositeField "pullRequest" [ Argument.required "number" requiredArgs____.number (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias PullRequestsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , states : OptionalArgument (List GithubNoFormat.Enum.PullRequestState.PullRequestState)
 , labels : OptionalArgument (List String)
 , headRefName : OptionalArgument String
 , baseRefName : OptionalArgument String
 , orderBy : OptionalArgument GithubNoFormat.InputObject.IssueOrder }

{-| A list of pull requests that have been opened in the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - states - A list of states to filter the pull requests by.
  - labels - A list of label names to filter the pull requests by.
  - headRefName - The head ref name to filter the pull requests by.
  - baseRefName - The base ref name to filter the pull requests by.
  - orderBy - Ordering options for pull requests returned from the connection.

-}
pullRequests : (PullRequestsOptionalArguments -> PullRequestsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.PullRequestConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
pullRequests fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, states = Absent, labels = Absent, headRefName = Absent, baseRefName = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "states" filledInOptionals____.states ((Encode.enum GithubNoFormat.Enum.PullRequestState.toString) |> Encode.list), Argument.optional "labels" filledInOptionals____.labels (Encode.string |> Encode.list), Argument.optional "headRefName" filledInOptionals____.headRefName (Encode.string), Argument.optional "baseRefName" filledInOptionals____.baseRefName (Encode.string), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeIssueOrder) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "pullRequests" optionalArgs____ (object____) (Basics.identity)


{-| Identifies when the repository was last pushed to.
-}
pushedAt : SelectionSet (Maybe GithubNoFormat.ScalarCodecs.DateTime) GithubNoFormat.Object.Repository
pushedAt =
      Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "pushedAt" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias RefRequiredArguments = { qualifiedName : String }

{-| Fetch a given ref from the repository

  - qualifiedName - The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`).

-}
ref : RefRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Ref
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
ref requiredArgs____ object____ =
      Object.selectionForCompositeField "ref" [ Argument.required "qualifiedName" requiredArgs____.qualifiedName (Encode.string) ] (object____) (Basics.identity >> Decode.nullable)


type alias RefsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , direction : OptionalArgument GithubNoFormat.Enum.OrderDirection.OrderDirection
 , orderBy : OptionalArgument GithubNoFormat.InputObject.RefOrder }

type alias RefsRequiredArguments = { refPrefix : String }

{-| Fetch a list of refs from the repository

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - refPrefix - A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
  - direction - DEPRECATED: use orderBy. The ordering direction.
  - orderBy - Ordering options for refs returned from the connection.

-}
refs : (RefsOptionalArguments -> RefsOptionalArguments)
 -> RefsRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.RefConnection
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
refs fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, direction = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "direction" filledInOptionals____.direction ((Encode.enum GithubNoFormat.Enum.OrderDirection.toString)), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeRefOrder) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "refs" (optionalArgs____ ++ [ Argument.required "refPrefix" requiredArgs____.refPrefix (Encode.string) ]) (object____) (Basics.identity >> Decode.nullable)


type alias ReleaseRequiredArguments = { tagName : String }

{-| Lookup a single release given various criteria.

  - tagName - The name of the Tag the Release was created from

-}
release : ReleaseRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Release
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Object.Repository
release requiredArgs____ object____ =
      Object.selectionForCompositeField "release" [ Argument.required "tagName" requiredArgs____.tagName (Encode.string) ] (object____) (Basics.identity >> Decode.nullable)


type alias ReleasesOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , orderBy : OptionalArgument GithubNoFormat.InputObject.ReleaseOrder }

{-| List of releases which are dependent on this repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - orderBy - Order for connection

-}
releases : (ReleasesOptionalArguments -> ReleasesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.ReleaseConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
releases fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeReleaseOrder) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "releases" optionalArgs____ (object____) (Basics.identity)


type alias RepositoryTopicsOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of applied repository-topic associations for this repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
repositoryTopics : (RepositoryTopicsOptionalArguments -> RepositoryTopicsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.RepositoryTopicConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
repositoryTopics fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "repositoryTopics" optionalArgs____ (object____) (Basics.identity)


{-| The HTTP path for this repository
-}
resourcePath : SelectionSet GithubNoFormat.ScalarCodecs.Uri GithubNoFormat.Object.Repository
resourcePath =
      Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias ShortDescriptionHTMLOptionalArguments = { limit : OptionalArgument Int }

{-| A description of the repository, rendered to HTML without any links in it.

  - limit - How many characters to return.

-}
shortDescriptionHTML : (ShortDescriptionHTMLOptionalArguments -> ShortDescriptionHTMLOptionalArguments)
 -> SelectionSet GithubNoFormat.ScalarCodecs.Html GithubNoFormat.Object.Repository
shortDescriptionHTML fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { limit = Absent }

        optionalArgs____ =
            [ Argument.optional "limit" filledInOptionals____.limit (Encode.int) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForField "ScalarCodecs.Html" "shortDescriptionHTML" optionalArgs____ (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The SSH URL to clone this repository
-}
sshUrl : SelectionSet GithubNoFormat.ScalarCodecs.GitSSHRemote GithubNoFormat.Object.Repository
sshUrl =
      Object.selectionForField "ScalarCodecs.GitSSHRemote" "sshUrl" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecGitSSHRemote |> .decoder)


type alias StargazersOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String
 , orderBy : OptionalArgument GithubNoFormat.InputObject.StarOrder }

{-| A list of users who have starred this starrable.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - orderBy - Order for connection

-}
stargazers : (StargazersOptionalArguments -> StargazersOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.StargazerConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
stargazers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeStarOrder) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "stargazers" optionalArgs____ (object____) (Basics.identity)


{-| Identifies the date and time when the object was last updated.
@deprecated General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.
-}
updatedAt : SelectionSet GithubNoFormat.ScalarCodecs.DateTime GithubNoFormat.Object.Repository
updatedAt =
      Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this repository
-}
url : SelectionSet GithubNoFormat.ScalarCodecs.Uri GithubNoFormat.Object.Repository
url =
      Object.selectionForField "ScalarCodecs.Uri" "url" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Indicates whether the viewer has admin permissions on this repository.
-}
viewerCanAdminister : SelectionSet Bool GithubNoFormat.Object.Repository
viewerCanAdminister =
      Object.selectionForField "Bool" "viewerCanAdminister" [] (Decode.bool)


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet Bool GithubNoFormat.Object.Repository
viewerCanCreateProjects =
      Object.selectionForField "Bool" "viewerCanCreateProjects" [] (Decode.bool)


{-| Check if the viewer is able to change their subscription status for the repository.
-}
viewerCanSubscribe : SelectionSet Bool GithubNoFormat.Object.Repository
viewerCanSubscribe =
      Object.selectionForField "Bool" "viewerCanSubscribe" [] (Decode.bool)


{-| Indicates whether the viewer can update the topics of this repository.
-}
viewerCanUpdateTopics : SelectionSet Bool GithubNoFormat.Object.Repository
viewerCanUpdateTopics =
      Object.selectionForField "Bool" "viewerCanUpdateTopics" [] (Decode.bool)


{-| Returns a boolean indicating whether the viewing user has starred this starrable.
-}
viewerHasStarred : SelectionSet Bool GithubNoFormat.Object.Repository
viewerHasStarred =
      Object.selectionForField "Bool" "viewerHasStarred" [] (Decode.bool)


{-| The users permission level on the repository. Will return null if authenticated as an GitHub App.
-}
viewerPermission : SelectionSet (Maybe GithubNoFormat.Enum.RepositoryPermission.RepositoryPermission) GithubNoFormat.Object.Repository
viewerPermission =
      Object.selectionForField "(Maybe Enum.RepositoryPermission.RepositoryPermission)" "viewerPermission" [] (GithubNoFormat.Enum.RepositoryPermission.decoder |> Decode.nullable)


{-| Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-}
viewerSubscription : SelectionSet GithubNoFormat.Enum.SubscriptionState.SubscriptionState GithubNoFormat.Object.Repository
viewerSubscription =
      Object.selectionForField "Enum.SubscriptionState.SubscriptionState" "viewerSubscription" [] (GithubNoFormat.Enum.SubscriptionState.decoder)


type alias WatchersOptionalArguments = { first : OptionalArgument Int
 , after : OptionalArgument String
 , last : OptionalArgument Int
 , before : OptionalArgument String }

{-| A list of users watching the repository.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.

-}
watchers : (WatchersOptionalArguments -> WatchersOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.UserConnection
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
watchers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "watchers" optionalArgs____ (object____) (Basics.identity)
