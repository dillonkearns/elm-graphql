-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module GithubNoFormat.Interface.RepositoryOwner exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import GithubNoFormat.Object
import GithubNoFormat.Interface
import GithubNoFormat.Union
import GithubNoFormat.Scalar
import GithubNoFormat.InputObject
import GithubNoFormat.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import GithubNoFormat.Enum.RepositoryPrivacy
import GithubNoFormat.Enum.RepositoryAffiliation
import GithubNoFormat.Enum.RepositoryPrivacy
import GithubNoFormat.Enum.RepositoryAffiliation

type alias Fragments decodesTo =
    {
    onOrganization : SelectionSet decodesTo GithubNoFormat.Object.Organization,
 onUser : SelectionSet decodesTo GithubNoFormat.Object.User
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo GithubNoFormat.Interface.RepositoryOwner
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "Organization" selections____.onOrganization,
 Object.buildFragment "User" selections____.onUser
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onOrganization = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
type alias AvatarUrlOptionalArguments = { size : OptionalArgument (Int) }

{-| A URL pointing to the owner's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments)
 -> SelectionSet (GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Interface.RepositoryOwner
avatarUrl fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { size = Absent }

        optionalArgs____ =
            [ Argument.optional "size" filledInOptionals____.size (Encode.int) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForField "(ScalarCodecs.Uri)" "avatarUrl" optionalArgs____ (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


id : SelectionSet (GithubNoFormat.ScalarCodecs.Id) GithubNoFormat.Interface.RepositoryOwner
id =
      Object.selectionForField "(ScalarCodecs.Id)" "id" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The username used to login.
-}
login : SelectionSet (String) GithubNoFormat.Interface.RepositoryOwner
login =
      Object.selectionForField "(String)" "login" [] (Decode.string)


type alias PinnedRepositoriesOptionalArguments = { first : OptionalArgument (Int)
 , after : OptionalArgument (String)
 , last : OptionalArgument (Int)
 , before : OptionalArgument (String)
 , privacy : OptionalArgument (GithubNoFormat.Enum.RepositoryPrivacy.RepositoryPrivacy)
 , orderBy : OptionalArgument (GithubNoFormat.InputObject.RepositoryOrder)
 , affiliations : OptionalArgument (List (Maybe GithubNoFormat.Enum.RepositoryAffiliation.RepositoryAffiliation))
 , isLocked : OptionalArgument (Bool) }

{-| A list of repositories this user has pinned to their profile

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Affiliation options for repositories returned from the connection
  - isLocked - If non-null, filters repositories according to whether they have been locked

-}
pinnedRepositories : (PinnedRepositoriesOptionalArguments -> PinnedRepositoriesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.RepositoryConnection
 -> SelectionSet (decodesTo) GithubNoFormat.Interface.RepositoryOwner
pinnedRepositories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, privacy = Absent, orderBy = Absent, affiliations = Absent, isLocked = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "privacy" filledInOptionals____.privacy ((Encode.enum GithubNoFormat.Enum.RepositoryPrivacy.toString)), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeRepositoryOrder), Argument.optional "affiliations" filledInOptionals____.affiliations ((Encode.enum GithubNoFormat.Enum.RepositoryAffiliation.toString) |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals____.isLocked (Encode.bool) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "pinnedRepositories" optionalArgs____ (object____) (Basics.identity)


type alias RepositoriesOptionalArguments = { first : OptionalArgument (Int)
 , after : OptionalArgument (String)
 , last : OptionalArgument (Int)
 , before : OptionalArgument (String)
 , privacy : OptionalArgument (GithubNoFormat.Enum.RepositoryPrivacy.RepositoryPrivacy)
 , orderBy : OptionalArgument (GithubNoFormat.InputObject.RepositoryOrder)
 , affiliations : OptionalArgument (List (Maybe GithubNoFormat.Enum.RepositoryAffiliation.RepositoryAffiliation))
 , isLocked : OptionalArgument (Bool)
 , isFork : OptionalArgument (Bool) }

{-| A list of repositories that the user owns.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Affiliation options for repositories returned from the connection
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - isFork - If non-null, filters repositories according to whether they are forks of another repository

-}
repositories : (RepositoriesOptionalArguments -> RepositoriesOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.RepositoryConnection
 -> SelectionSet (decodesTo) GithubNoFormat.Interface.RepositoryOwner
repositories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, privacy = Absent, orderBy = Absent, affiliations = Absent, isLocked = Absent, isFork = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "privacy" filledInOptionals____.privacy ((Encode.enum GithubNoFormat.Enum.RepositoryPrivacy.toString)), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeRepositoryOrder), Argument.optional "affiliations" filledInOptionals____.affiliations ((Encode.enum GithubNoFormat.Enum.RepositoryAffiliation.toString) |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals____.isLocked (Encode.bool), Argument.optional "isFork" filledInOptionals____.isFork (Encode.bool) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "repositories" optionalArgs____ (object____) (Basics.identity)


type alias RepositoryRequiredArguments = { name : (String) }

{-| Find Repository.

  - name - Name of Repository to find.

-}
repository : RepositoryRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Repository
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Interface.RepositoryOwner
repository requiredArgs____ object____ =
      Object.selectionForCompositeField "repository" [ Argument.required "name" requiredArgs____.name (Encode.string) ] (object____) (Basics.identity >> Decode.nullable)


{-| The HTTP URL for the owner.
-}
resourcePath : SelectionSet (GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Interface.RepositoryOwner
resourcePath =
      Object.selectionForField "(ScalarCodecs.Uri)" "resourcePath" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for the owner.
-}
url : SelectionSet (GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Interface.RepositoryOwner
url =
      Object.selectionForField "(ScalarCodecs.Uri)" "url" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)
