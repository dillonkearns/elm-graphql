-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module GithubNoFormat.Interface.ProjectOwner exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import GithubNoFormat.Object
import GithubNoFormat.Interface
import GithubNoFormat.Union
import GithubNoFormat.Scalar
import GithubNoFormat.InputObject
import GithubNoFormat.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import GithubNoFormat.Enum.ProjectState

type alias Fragments decodesTo =
    {
    onOrganization : SelectionSet decodesTo GithubNoFormat.Object.Organization,
 onRepository : SelectionSet decodesTo GithubNoFormat.Object.Repository
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo GithubNoFormat.Interface.ProjectOwner
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "Organization" selections____.onOrganization,
 Object.buildFragment "Repository" selections____.onRepository
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onOrganization = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onRepository = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
id : SelectionSet (GithubNoFormat.ScalarCodecs.Id) GithubNoFormat.Interface.ProjectOwner
id =
      Object.selectionForField "(ScalarCodecs.Id)" "id" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias ProjectRequiredArguments = { number : (Int) }

{-| Find project by number.

  - number - The project number to find.

-}
project : ProjectRequiredArguments
 -> SelectionSet decodesTo GithubNoFormat.Object.Project
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Interface.ProjectOwner
project requiredArgs____ object____ =
      Object.selectionForCompositeField "project" [ Argument.required "number" requiredArgs____.number (Encode.int) ] (object____) (Basics.identity >> Decode.nullable)


type alias ProjectsOptionalArguments = { first : OptionalArgument (Int)
 , after : OptionalArgument (String)
 , last : OptionalArgument (Int)
 , before : OptionalArgument (String)
 , orderBy : OptionalArgument (GithubNoFormat.InputObject.ProjectOrder)
 , search : OptionalArgument (String)
 , states : OptionalArgument (List GithubNoFormat.Enum.ProjectState.ProjectState) }

{-| A list of projects under the owner.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - orderBy - Ordering options for projects returned from the connection
  - search - Query to search projects by, currently only searching by name.
  - states - A list of states to filter the projects by.

-}
projects : (ProjectsOptionalArguments -> ProjectsOptionalArguments)
 -> SelectionSet decodesTo GithubNoFormat.Object.ProjectConnection
 -> SelectionSet (decodesTo) GithubNoFormat.Interface.ProjectOwner
projects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent, last = Absent, before = Absent, orderBy = Absent, search = Absent, states = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "orderBy" filledInOptionals____.orderBy (GithubNoFormat.InputObject.encodeProjectOrder), Argument.optional "search" filledInOptionals____.search (Encode.string), Argument.optional "states" filledInOptionals____.states ((Encode.enum GithubNoFormat.Enum.ProjectState.toString) |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "projects" optionalArgs____ (object____) (Basics.identity)


{-| The HTTP path listing owners projects
-}
projectsResourcePath : SelectionSet (GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Interface.ProjectOwner
projectsResourcePath =
      Object.selectionForField "(ScalarCodecs.Uri)" "projectsResourcePath" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL listing owners projects
-}
projectsUrl : SelectionSet (GithubNoFormat.ScalarCodecs.Uri) GithubNoFormat.Interface.ProjectOwner
projectsUrl =
      Object.selectionForField "(ScalarCodecs.Uri)" "projectsUrl" [] (GithubNoFormat.ScalarCodecs.codecs |> GithubNoFormat.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Can the current viewer create new projects on this owner.
-}
viewerCanCreateProjects : SelectionSet (Bool) GithubNoFormat.Interface.ProjectOwner
viewerCanCreateProjects =
      Object.selectionForField "(Bool)" "viewerCanCreateProjects" [] (Decode.bool)
