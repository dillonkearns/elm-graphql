-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module GithubNoFormat.Interface.GitSignature exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import GithubNoFormat.Object
import GithubNoFormat.Interface
import GithubNoFormat.Union
import GithubNoFormat.Scalar
import GithubNoFormat.InputObject
import GithubNoFormat.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import GithubNoFormat.Enum.GitSignatureState

type alias Fragments decodesTo =
    {
    onGpgSignature : SelectionSet decodesTo GithubNoFormat.Object.GpgSignature,
 onSmimeSignature : SelectionSet decodesTo GithubNoFormat.Object.SmimeSignature,
 onUnknownSignature : SelectionSet decodesTo GithubNoFormat.Object.UnknownSignature
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo GithubNoFormat.Interface.GitSignature
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "GpgSignature" selections____.onGpgSignature,
 Object.buildFragment "SmimeSignature" selections____.onSmimeSignature,
 Object.buildFragment "UnknownSignature" selections____.onUnknownSignature
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onGpgSignature = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onSmimeSignature = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onUnknownSignature = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
{-| Email used to sign this object.
-}
email : SelectionSet (String) GithubNoFormat.Interface.GitSignature
email =
      Object.selectionForField "(String)" "email" [] (Decode.string)


{-| True if the signature is valid and verified by GitHub.
-}
isValid : SelectionSet (Bool) GithubNoFormat.Interface.GitSignature
isValid =
      Object.selectionForField "(Bool)" "isValid" [] (Decode.bool)


{-| Payload for GPG signing object. Raw ODB object without the signature header.
-}
payload : SelectionSet (String) GithubNoFormat.Interface.GitSignature
payload =
      Object.selectionForField "(String)" "payload" [] (Decode.string)


{-| ASCII-armored signature header from object.
-}
signature : SelectionSet (String) GithubNoFormat.Interface.GitSignature
signature =
      Object.selectionForField "(String)" "signature" [] (Decode.string)


{-| GitHub user corresponding to the email signing this commit.
-}
signer : SelectionSet decodesTo GithubNoFormat.Object.User
 -> SelectionSet (Maybe decodesTo) GithubNoFormat.Interface.GitSignature
signer object____ =
      Object.selectionForCompositeField "signer" [] (object____) (Basics.identity >> Decode.nullable)


{-| The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
-}
state : SelectionSet (GithubNoFormat.Enum.GitSignatureState.GitSignatureState) GithubNoFormat.Interface.GitSignature
state =
      Object.selectionForField "(Enum.GitSignatureState.GitSignatureState)" "state" [] (GithubNoFormat.Enum.GitSignatureState.decoder)
