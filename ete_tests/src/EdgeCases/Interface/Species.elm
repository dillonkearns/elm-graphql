-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EdgeCases.Interface.Species exposing (..)

import EdgeCases.InputObject
import EdgeCases.Interface
import EdgeCases.Object
import EdgeCases.Scalar
import EdgeCases.ScalarCodecs
import EdgeCases.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onHuman : SelectionSet decodesTo EdgeCases.Object.Human
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo EdgeCases.Interface.Species
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Human" selections____.onHuman
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onHuman = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


name : SelectionSet String EdgeCases.Interface.Species
name =
    Object.selectionForField "String" "name" [] Decode.string


numberOfHearts : SelectionSet Int EdgeCases.Interface.Species
numberOfHearts =
    Object.selectionForField "Int" "numberOfHearts" [] Decode.int
