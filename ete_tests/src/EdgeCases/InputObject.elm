-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EdgeCases.InputObject exposing (..)

import EdgeCases.Interface
import EdgeCases.Object
import EdgeCases.Scalar
import EdgeCases.ScalarCodecs
import EdgeCases.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildShapeInput :
    (ShapeInputOptionalFields -> ShapeInputOptionalFields)
    -> ShapeInput
buildShapeInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { kind = Absent, geometry = Absent }
    in
    { kind = optionals____.kind, geometry = optionals____.geometry }


type alias ShapeInputOptionalFields =
    { kind : OptionalArgument String
    , geometry : OptionalArgument (List (Maybe (List (Maybe Float))))
    }


{-| Type for the ShapeInput input object.
-}
type alias ShapeInput =
    { kind : OptionalArgument String, geometry : OptionalArgument (List (Maybe (List (Maybe Float)))) }


{-| Encode a ShapeInput into a value that can be used as an argument.
-}
encodeShapeInput : ShapeInput -> Value
encodeShapeInput input____ =
    Encode.maybeObject
        [ ( "kind", Encode.string |> Encode.optional input____.kind ), ( "geometry", (Encode.float |> Encode.maybe |> Encode.list |> Encode.maybe |> Encode.list) |> Encode.optional input____.geometry ) ]
