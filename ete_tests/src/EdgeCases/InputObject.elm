-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EdgeCases.InputObject exposing (..)

import EdgeCases.Enum.RegularShapeInputKind
import EdgeCases.Interface
import EdgeCases.Object
import EdgeCases.Scalar
import EdgeCases.ScalarCodecs
import EdgeCases.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildRegularShapeInput :
    (RegularShapeInputOptionalFields -> RegularShapeInputOptionalFields)
    -> RegularShapeInput
buildRegularShapeInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { kind = Absent }
    in
    { kind = optionals____.kind }


type alias RegularShapeInputOptionalFields =
    { kind : OptionalArgument EdgeCases.Enum.RegularShapeInputKind.RegularShapeInputKind }


{-| Type for the RegularShapeInput input object.
-}
type alias RegularShapeInput =
    { kind : OptionalArgument EdgeCases.Enum.RegularShapeInputKind.RegularShapeInputKind }


{-| Encode a RegularShapeInput into a value that can be used as an argument.
-}
encodeRegularShapeInput : RegularShapeInput -> Value
encodeRegularShapeInput input____ =
    Encode.maybeObject
        [ ( "kind", Encode.enum EdgeCases.Enum.RegularShapeInputKind.toString |> Encode.optional input____.kind ) ]


buildShapeInput :
    (ShapeInputOptionalFields -> ShapeInputOptionalFields)
    -> ShapeInput
buildShapeInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { kind = Absent, geometry = Absent }
    in
    { kind = optionals____.kind, geometry = optionals____.geometry }


type alias ShapeInputOptionalFields =
    { kind : OptionalArgument String
    , geometry : OptionalArgument (List (Maybe (List (Maybe Float))))
    }


{-| Type for the ShapeInput input object.
-}
type alias ShapeInput =
    { kind : OptionalArgument String
    , geometry : OptionalArgument (List (Maybe (List (Maybe Float))))
    }


{-| Encode a ShapeInput into a value that can be used as an argument.
-}
encodeShapeInput : ShapeInput -> Value
encodeShapeInput input____ =
    Encode.maybeObject
        [ ( "kind", Encode.string |> Encode.optional input____.kind ), ( "geometry", (Encode.float |> Encode.maybe |> Encode.list |> Encode.maybe |> Encode.list) |> Encode.optional input____.geometry ) ]


buildShapeInputOneOf :
    (ShapeInputOneOfOptionalFields -> ShapeInputOneOfOptionalFields)
    -> ShapeInputOneOf
buildShapeInputOneOf fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { base = Absent, regular = Absent }
    in
    { base = optionals____.base, regular = optionals____.regular }


type alias ShapeInputOneOfOptionalFields =
    { base : OptionalArgument ShapeInput
    , regular : OptionalArgument RegularShapeInput
    }


{-| Type for the ShapeInputOneOf input object.
-}
type alias ShapeInputOneOf =
    { base : OptionalArgument ShapeInput
    , regular : OptionalArgument RegularShapeInput
    }


{-| Encode a ShapeInputOneOf into a value that can be used as an argument.
-}
encodeShapeInputOneOf : ShapeInputOneOf -> Value
encodeShapeInputOneOf input____ =
    Encode.maybeObject
        [ ( "base", encodeShapeInput |> Encode.optional input____.base ), ( "regular", encodeRegularShapeInput |> Encode.optional input____.regular ) ]
