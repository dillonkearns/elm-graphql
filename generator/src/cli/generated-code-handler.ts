import * as glob from "glob";
import * as fs from "fs";
import { prependBasePath } from "./path-helpers";
import { introspectionFromSchema, buildSchema } from "graphql";

export function removeGenerated(path: string): void {
  glob.sync(path + "/**/*.elm").forEach(fs.unlinkSync);
}

export function isGenerated(path: string): boolean {
  return (
    fs
      .readFileSync(path)
      .indexOf("Do not manually edit this file, it was auto-generated by") >= 0
  );
}

export function warnAndExitIfContainsNonGenerated({
  baseModule,
  outputPath
}: {
  baseModule: string[];
  outputPath: string;
}): void {
  const files: string[] = glob.sync(
    prependBasePath("/", baseModule, outputPath) + "/**/*.elm"
  );
  const nonGenerated = files.filter(file => !isGenerated(file));

  if (nonGenerated.length > 0) {
    console.log(
      "@dillonkearns/elm-graphql found some files that it did not generate. Please move or delete the following files and run @dillonkearns/elm-graphql again.",
      nonGenerated
    );
    process.exit(1);
  }
}

export function generateOrExitIntrospectionFileFromSchema(
  schemaFilePath: string
) : {} | undefined {
  console.log("schemaFilePath", schemaFilePath);
  if (fs.existsSync(schemaFilePath)) {
    const schemaData = fs.readFileSync(schemaFilePath, "utf-8");
    
    try {
      // Try parsing as JSON first
      const jsonData = JSON.parse(schemaData);
      
      // If it has a data.__schema structure, return the data property
      if (jsonData.data && jsonData.data.__schema) {
        return jsonData.data;
      }
      
      // If it has a __schema property directly, return the whole object
      if (jsonData.__schema) {
        return jsonData;
      }
      
      console.log("JSON parsed but no schema structure found, trying as SDL");
    } catch (e) {
      // JSON parsing failed, try as SDL
      console.log("Not valid JSON, trying as GraphQL SDL");
    }
    
    // If we get here, either it wasn't valid JSON or the JSON didn't have schema data
    try {
      return JSON.parse(
        JSON.stringify(
          introspectionFromSchema(buildSchema(schemaData.toString()))
        )
      );
    } catch (sdlError) {
      console.error("Failed to parse schema file as either JSON or SDL", sdlError);
      process.exit(1);
    }
  } else {
    console.log("Schema file not found");
    process.exit(1);
  }
}
