-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Swapi.Enum.Episode exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| One of the films in the Star Wars Trilogy

  - Jedi - Released in 1983.
  - Empire - Released in 1980.
  - Newhope - Released in 1977.

-}
type Episode
    = Jedi
    | Empire
    | Newhope


list : List Episode
list =
    [ Jedi, Empire, Newhope ]


decoder : Decoder Episode
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "JEDI" ->
                        Decode.succeed Jedi

                    "EMPIRE" ->
                        Decode.succeed Empire

                    "NEWHOPE" ->
                        Decode.succeed Newhope

                    _ ->
                        Decode.fail ("Invalid Episode type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Episode -> String
toString enum____ =
    case enum____ of
        Jedi ->
            "JEDI"

        Empire ->
            "EMPIRE"

        Newhope ->
            "NEWHOPE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Episode
fromString enumString____ =
    case enumString____ of
        "JEDI" ->
            Just Jedi

        "EMPIRE" ->
            Just Empire

        "NEWHOPE" ->
            Just Newhope

        _ ->
            Nothing
