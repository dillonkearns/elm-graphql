-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Swapi.Enum.Phrase exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Phrases for StarChat

  - Faith - Originally said by Vader.
  - Try - Originally said by Yoda.
  - Help - Originally said by Leia.
  - BadFeeling - Originally said by Han Solo
  - Droids - Originally said by Obi-Wan
  - Father - Originally said by Vader.
  - TheForce - Originally said by Obi-Wan.
  - Traitor - Originally said by Vader
  - Trap - Originally said by Admiral Ackbar

-}
type Phrase
    = Faith
    | Try
    | Help
    | BadFeeling
    | Droids
    | Father
    | TheForce
    | Traitor
    | Trap


list : List Phrase
list =
    [ Faith, Try, Help, BadFeeling, Droids, Father, TheForce, Traitor, Trap ]


decoder : Decoder Phrase
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "FAITH" ->
                        Decode.succeed Faith

                    "TRY" ->
                        Decode.succeed Try

                    "HELP" ->
                        Decode.succeed Help

                    "BAD_FEELING" ->
                        Decode.succeed BadFeeling

                    "DROIDS" ->
                        Decode.succeed Droids

                    "FATHER" ->
                        Decode.succeed Father

                    "THE_FORCE" ->
                        Decode.succeed TheForce

                    "TRAITOR" ->
                        Decode.succeed Traitor

                    "TRAP" ->
                        Decode.succeed Trap

                    _ ->
                        Decode.fail ("Invalid Phrase type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Phrase -> String
toString enum____ =
    case enum____ of
        Faith ->
            "FAITH"

        Try ->
            "TRY"

        Help ->
            "HELP"

        BadFeeling ->
            "BAD_FEELING"

        Droids ->
            "DROIDS"

        Father ->
            "FATHER"

        TheForce ->
            "THE_FORCE"

        Traitor ->
            "TRAITOR"

        Trap ->
            "TRAP"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Phrase
fromString enumString____ =
    case enumString____ of
        "FAITH" ->
            Just Faith

        "TRY" ->
            Just Try

        "HELP" ->
            Just Help

        "BAD_FEELING" ->
            Just BadFeeling

        "DROIDS" ->
            Just Droids

        "FATHER" ->
            Just Father

        "THE_FORCE" ->
            Just TheForce

        "TRAITOR" ->
            Just Traitor

        "TRAP" ->
            Just Trap

        _ ->
            Nothing
