-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Swapi.InputObject exposing (..)

import CustomScalarCodecs
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Swapi.Enum.Language
import Swapi.Interface
import Swapi.Object
import Swapi.Scalar
import Swapi.Union


buildGreeting :
    GreetingRequiredFields
    -> (GreetingOptionalFields -> GreetingOptionalFields)
    -> Greeting
buildGreeting required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { options = Absent, language = Absent }
    in
    { name = required____.name, options = optionals____.options, language = optionals____.language }


type alias GreetingRequiredFields =
    { name : String }


type alias GreetingOptionalFields =
    { options : OptionalArgument GreetingOptions
    , language : OptionalArgument Swapi.Enum.Language.Language
    }


{-| Type for the Greeting input object.
-}
type alias Greeting =
    { name : String
    , options : OptionalArgument GreetingOptions
    , language : OptionalArgument Swapi.Enum.Language.Language
    }


{-| Encode a Greeting into a value that can be used as an argument.
-}
encodeGreeting : Greeting -> Value
encodeGreeting input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "options", encodeGreetingOptions |> Encode.optional input____.options ), ( "language", Encode.enum Swapi.Enum.Language.toString |> Encode.optional input____.language ) ]


buildGreetingOptions :
    (GreetingOptionsOptionalFields -> GreetingOptionsOptionalFields)
    -> GreetingOptions
buildGreetingOptions fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { prefix = Absent }
    in
    { prefix = optionals____.prefix }


type alias GreetingOptionsOptionalFields =
    { prefix : OptionalArgument String }


{-| Type for the GreetingOptions input object.
-}
type alias GreetingOptions =
    { prefix : OptionalArgument String }


{-| Encode a GreetingOptions into a value that can be used as an argument.
-}
encodeGreetingOptions : GreetingOptions -> Value
encodeGreetingOptions input____ =
    Encode.maybeObject
        [ ( "prefix", Encode.string |> Encode.optional input____.prefix ) ]
