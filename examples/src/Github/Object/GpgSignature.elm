-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Github.Object.GpgSignature exposing (..)

import Github.Enum.GitSignatureState
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.GpgSignature
selection constructor =
    Object.selection constructor


typename__ : Field String Github.Object.GpgSignature
typename__ =
    Object.fieldDecoder "__typename" [] Decode.string


{-| Email used to sign this object.
-}
email : Field String Github.Object.GpgSignature
email =
    Object.fieldDecoder "email" [] Decode.string


{-| True if the signature is valid and verified by GitHub.
-}
isValid : Field Bool Github.Object.GpgSignature
isValid =
    Object.fieldDecoder "isValid" [] Decode.bool


{-| Hex-encoded ID of the key that signed this object.
-}
keyId : Field (Maybe String) Github.Object.GpgSignature
keyId =
    Object.fieldDecoder "keyId" [] (Decode.string |> Decode.nullable)


{-| Payload for GPG signing object. Raw ODB object without the signature header.
-}
payload : Field String Github.Object.GpgSignature
payload =
    Object.fieldDecoder "payload" [] Decode.string


{-| ASCII-armored signature header from object.
-}
signature : Field String Github.Object.GpgSignature
signature =
    Object.fieldDecoder "signature" [] Decode.string


{-| GitHub user corresponding to the email signing this commit.
-}
signer : SelectionSet decodesTo Github.Object.User -> Field (Maybe decodesTo) Github.Object.GpgSignature
signer object =
    Object.selectionField "signer" [] object (identity >> Decode.nullable)


{-| The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
-}
state : Field Github.Enum.GitSignatureState.GitSignatureState Github.Object.GpgSignature
state =
    Object.fieldDecoder "state" [] Github.Enum.GitSignatureState.decoder
