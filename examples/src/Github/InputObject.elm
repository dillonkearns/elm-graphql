-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.InputObject exposing (..)

import Github.Enum.GistOrderField
import Github.Enum.IssueOrderField
import Github.Enum.LanguageOrderField
import Github.Enum.LockReason
import Github.Enum.MilestoneOrderField
import Github.Enum.OrderDirection
import Github.Enum.ProjectOrderField
import Github.Enum.ProjectState
import Github.Enum.PullRequestReviewEvent
import Github.Enum.ReactionContent
import Github.Enum.ReactionOrderField
import Github.Enum.RefOrderField
import Github.Enum.ReleaseOrderField
import Github.Enum.RepositoryOrderField
import Github.Enum.StarOrderField
import Github.Enum.SubscriptionState
import Github.Enum.TeamOrderField
import Github.Enum.TeamRepositoryOrderField
import Github.Enum.TopicSuggestionDeclineReason
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAcceptTopicSuggestionInput :
    AcceptTopicSuggestionInputRequiredFields
    -> (AcceptTopicSuggestionInputOptionalFields -> AcceptTopicSuggestionInputOptionalFields)
    -> AcceptTopicSuggestionInput
buildAcceptTopicSuggestionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, repositoryId = required.repositoryId, name = required.name }


type alias AcceptTopicSuggestionInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    }


type alias AcceptTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptTopicSuggestionInput input object.
-}
type alias AcceptTopicSuggestionInput =
    { clientMutationId : OptionalArgument String
    , repositoryId : Github.ScalarCodecs.Id
    , name : String
    }


{-| Encode a AcceptTopicSuggestionInput into a value that can be used as an argument.
-}
encodeAcceptTopicSuggestionInput : AcceptTopicSuggestionInput -> Value
encodeAcceptTopicSuggestionInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ) ]


buildAddCommentInput :
    AddCommentInputRequiredFields
    -> (AddCommentInputOptionalFields -> AddCommentInputOptionalFields)
    -> AddCommentInput
buildAddCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, subjectId = required.subjectId, body = required.body }


type alias AddCommentInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , body : String
    }


type alias AddCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddCommentInput input object.
-}
type alias AddCommentInput =
    { clientMutationId : OptionalArgument String
    , subjectId : Github.ScalarCodecs.Id
    , body : String
    }


{-| Encode a AddCommentInput into a value that can be used as an argument.
-}
encodeAddCommentInput : AddCommentInput -> Value
encodeAddCommentInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "body", Encode.string input.body |> Just ) ]


buildAddProjectCardInput :
    AddProjectCardInputRequiredFields
    -> (AddProjectCardInputOptionalFields -> AddProjectCardInputOptionalFields)
    -> AddProjectCardInput
buildAddProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, contentId = Absent, note = Absent }
    in
    { clientMutationId = optionals.clientMutationId, projectColumnId = required.projectColumnId, contentId = optionals.contentId, note = optionals.note }


type alias AddProjectCardInputRequiredFields =
    { projectColumnId : Github.ScalarCodecs.Id }


type alias AddProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , contentId : OptionalArgument Github.ScalarCodecs.Id
    , note : OptionalArgument String
    }


{-| Type for the AddProjectCardInput input object.
-}
type alias AddProjectCardInput =
    { clientMutationId : OptionalArgument String
    , projectColumnId : Github.ScalarCodecs.Id
    , contentId : OptionalArgument Github.ScalarCodecs.Id
    , note : OptionalArgument String
    }


{-| Encode a AddProjectCardInput into a value that can be used as an argument.
-}
encodeAddProjectCardInput : AddProjectCardInput -> Value
encodeAddProjectCardInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "projectColumnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.projectColumnId |> Just ), ( "contentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input.contentId ), ( "note", Encode.string |> Encode.optional input.note ) ]


buildAddProjectColumnInput :
    AddProjectColumnInputRequiredFields
    -> (AddProjectColumnInputOptionalFields -> AddProjectColumnInputOptionalFields)
    -> AddProjectColumnInput
buildAddProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, projectId = required.projectId, name = required.name }


type alias AddProjectColumnInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , name : String
    }


type alias AddProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddProjectColumnInput input object.
-}
type alias AddProjectColumnInput =
    { clientMutationId : OptionalArgument String
    , projectId : Github.ScalarCodecs.Id
    , name : String
    }


{-| Encode a AddProjectColumnInput into a value that can be used as an argument.
-}
encodeAddProjectColumnInput : AddProjectColumnInput -> Value
encodeAddProjectColumnInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "name", Encode.string input.name |> Just ) ]


buildAddPullRequestReviewCommentInput :
    AddPullRequestReviewCommentInputRequiredFields
    -> (AddPullRequestReviewCommentInputOptionalFields -> AddPullRequestReviewCommentInputOptionalFields)
    -> AddPullRequestReviewCommentInput
buildAddPullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, commitOID = Absent, path = Absent, position = Absent, inReplyTo = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestReviewId = required.pullRequestReviewId, commitOID = optionals.commitOID, body = required.body, path = optionals.path, position = optionals.position, inReplyTo = optionals.inReplyTo }


type alias AddPullRequestReviewCommentInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , body : String
    }


type alias AddPullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Type for the AddPullRequestReviewCommentInput input object.
-}
type alias AddPullRequestReviewCommentInput =
    { clientMutationId : OptionalArgument String
    , pullRequestReviewId : Github.ScalarCodecs.Id
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , body : String
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Encode a AddPullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewCommentInput : AddPullRequestReviewCommentInput -> Value
encodeAddPullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "commitOID", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.commitOID ), ( "body", Encode.string input.body |> Just ), ( "path", Encode.string |> Encode.optional input.path ), ( "position", Encode.int |> Encode.optional input.position ), ( "inReplyTo", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input.inReplyTo ) ]


buildAddPullRequestReviewInput :
    AddPullRequestReviewInputRequiredFields
    -> (AddPullRequestReviewInputOptionalFields -> AddPullRequestReviewInputOptionalFields)
    -> AddPullRequestReviewInput
buildAddPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, commitOID = Absent, body = Absent, event = Absent, comments = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestId = required.pullRequestId, commitOID = optionals.commitOID, body = optionals.body, event = optionals.event, comments = optionals.comments }


type alias AddPullRequestReviewInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias AddPullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    }


{-| Type for the AddPullRequestReviewInput input object.
-}
type alias AddPullRequestReviewInput =
    { clientMutationId : OptionalArgument String
    , pullRequestId : Github.ScalarCodecs.Id
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    }


{-| Encode a AddPullRequestReviewInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewInput : AddPullRequestReviewInput -> Value
encodeAddPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "commitOID", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input.commitOID ), ( "body", Encode.string |> Encode.optional input.body ), ( "event", Encode.enum Github.Enum.PullRequestReviewEvent.toString |> Encode.optional input.event ), ( "comments", (encodeDraftPullRequestReviewComment |> Encode.maybe |> Encode.list) |> Encode.optional input.comments ) ]


buildAddReactionInput :
    AddReactionInputRequiredFields
    -> (AddReactionInputOptionalFields -> AddReactionInputOptionalFields)
    -> AddReactionInput
buildAddReactionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, subjectId = required.subjectId, content = required.content }


type alias AddReactionInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    }


type alias AddReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddReactionInput input object.
-}
type alias AddReactionInput =
    { clientMutationId : OptionalArgument String
    , subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    }


{-| Encode a AddReactionInput into a value that can be used as an argument.
-}
encodeAddReactionInput : AddReactionInput -> Value
encodeAddReactionInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "content", Encode.enum Github.Enum.ReactionContent.toString input.content |> Just ) ]


buildAddStarInput :
    AddStarInputRequiredFields
    -> (AddStarInputOptionalFields -> AddStarInputOptionalFields)
    -> AddStarInput
buildAddStarInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, starrableId = required.starrableId }


type alias AddStarInputRequiredFields =
    { starrableId : Github.ScalarCodecs.Id }


type alias AddStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddStarInput input object.
-}
type alias AddStarInput =
    { clientMutationId : OptionalArgument String
    , starrableId : Github.ScalarCodecs.Id
    }


{-| Encode a AddStarInput into a value that can be used as an argument.
-}
encodeAddStarInput : AddStarInput -> Value
encodeAddStarInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "starrableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.starrableId |> Just ) ]


buildCommitAuthor :
    (CommitAuthorOptionalFields -> CommitAuthorOptionalFields)
    -> CommitAuthor
buildCommitAuthor fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, emails = Absent }
    in
    { id = optionals.id, emails = optionals.emails }


type alias CommitAuthorOptionalFields =
    { id : OptionalArgument Github.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Type for the CommitAuthor input object.
-}
type alias CommitAuthor =
    { id : OptionalArgument Github.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Encode a CommitAuthor into a value that can be used as an argument.
-}
encodeCommitAuthor : CommitAuthor -> Value
encodeCommitAuthor input =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "emails", (Encode.string |> Encode.list) |> Encode.optional input.emails ) ]


buildCreateProjectInput :
    CreateProjectInputRequiredFields
    -> (CreateProjectInputOptionalFields -> CreateProjectInputOptionalFields)
    -> CreateProjectInput
buildCreateProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, body = Absent }
    in
    { clientMutationId = optionals.clientMutationId, ownerId = required.ownerId, name = required.name, body = optionals.body }


type alias CreateProjectInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , name : String
    }


type alias CreateProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , body : OptionalArgument String
    }


{-| Type for the CreateProjectInput input object.
-}
type alias CreateProjectInput =
    { clientMutationId : OptionalArgument String
    , ownerId : Github.ScalarCodecs.Id
    , name : String
    , body : OptionalArgument String
    }


{-| Encode a CreateProjectInput into a value that can be used as an argument.
-}
encodeCreateProjectInput : CreateProjectInput -> Value
encodeCreateProjectInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.ownerId |> Just ), ( "name", Encode.string input.name |> Just ), ( "body", Encode.string |> Encode.optional input.body ) ]


buildDeclineTopicSuggestionInput :
    DeclineTopicSuggestionInputRequiredFields
    -> (DeclineTopicSuggestionInputOptionalFields -> DeclineTopicSuggestionInputOptionalFields)
    -> DeclineTopicSuggestionInput
buildDeclineTopicSuggestionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, repositoryId = required.repositoryId, name = required.name, reason = required.reason }


type alias DeclineTopicSuggestionInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , reason : Github.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    }


type alias DeclineTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeclineTopicSuggestionInput input object.
-}
type alias DeclineTopicSuggestionInput =
    { clientMutationId : OptionalArgument String
    , repositoryId : Github.ScalarCodecs.Id
    , name : String
    , reason : Github.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    }


{-| Encode a DeclineTopicSuggestionInput into a value that can be used as an argument.
-}
encodeDeclineTopicSuggestionInput : DeclineTopicSuggestionInput -> Value
encodeDeclineTopicSuggestionInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "name", Encode.string input.name |> Just ), ( "reason", Encode.enum Github.Enum.TopicSuggestionDeclineReason.toString input.reason |> Just ) ]


buildDeleteProjectCardInput :
    DeleteProjectCardInputRequiredFields
    -> (DeleteProjectCardInputOptionalFields -> DeleteProjectCardInputOptionalFields)
    -> DeleteProjectCardInput
buildDeleteProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, cardId = required.cardId }


type alias DeleteProjectCardInputRequiredFields =
    { cardId : Github.ScalarCodecs.Id }


type alias DeleteProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectCardInput input object.
-}
type alias DeleteProjectCardInput =
    { clientMutationId : OptionalArgument String
    , cardId : Github.ScalarCodecs.Id
    }


{-| Encode a DeleteProjectCardInput into a value that can be used as an argument.
-}
encodeDeleteProjectCardInput : DeleteProjectCardInput -> Value
encodeDeleteProjectCardInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "cardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.cardId |> Just ) ]


buildDeleteProjectColumnInput :
    DeleteProjectColumnInputRequiredFields
    -> (DeleteProjectColumnInputOptionalFields -> DeleteProjectColumnInputOptionalFields)
    -> DeleteProjectColumnInput
buildDeleteProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, columnId = required.columnId }


type alias DeleteProjectColumnInputRequiredFields =
    { columnId : Github.ScalarCodecs.Id }


type alias DeleteProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectColumnInput input object.
-}
type alias DeleteProjectColumnInput =
    { clientMutationId : OptionalArgument String
    , columnId : Github.ScalarCodecs.Id
    }


{-| Encode a DeleteProjectColumnInput into a value that can be used as an argument.
-}
encodeDeleteProjectColumnInput : DeleteProjectColumnInput -> Value
encodeDeleteProjectColumnInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "columnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.columnId |> Just ) ]


buildDeleteProjectInput :
    DeleteProjectInputRequiredFields
    -> (DeleteProjectInputOptionalFields -> DeleteProjectInputOptionalFields)
    -> DeleteProjectInput
buildDeleteProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, projectId = required.projectId }


type alias DeleteProjectInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id }


type alias DeleteProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectInput input object.
-}
type alias DeleteProjectInput =
    { clientMutationId : OptionalArgument String
    , projectId : Github.ScalarCodecs.Id
    }


{-| Encode a DeleteProjectInput into a value that can be used as an argument.
-}
encodeDeleteProjectInput : DeleteProjectInput -> Value
encodeDeleteProjectInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.projectId |> Just ) ]


buildDeletePullRequestReviewInput :
    DeletePullRequestReviewInputRequiredFields
    -> (DeletePullRequestReviewInputOptionalFields -> DeletePullRequestReviewInputOptionalFields)
    -> DeletePullRequestReviewInput
buildDeletePullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestReviewId = required.pullRequestReviewId }


type alias DeletePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id }


type alias DeletePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeletePullRequestReviewInput input object.
-}
type alias DeletePullRequestReviewInput =
    { clientMutationId : OptionalArgument String
    , pullRequestReviewId : Github.ScalarCodecs.Id
    }


{-| Encode a DeletePullRequestReviewInput into a value that can be used as an argument.
-}
encodeDeletePullRequestReviewInput : DeletePullRequestReviewInput -> Value
encodeDeletePullRequestReviewInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ) ]


buildDismissPullRequestReviewInput :
    DismissPullRequestReviewInputRequiredFields
    -> (DismissPullRequestReviewInputOptionalFields -> DismissPullRequestReviewInputOptionalFields)
    -> DismissPullRequestReviewInput
buildDismissPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestReviewId = required.pullRequestReviewId, message = required.message }


type alias DismissPullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , message : String
    }


type alias DismissPullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DismissPullRequestReviewInput input object.
-}
type alias DismissPullRequestReviewInput =
    { clientMutationId : OptionalArgument String
    , pullRequestReviewId : Github.ScalarCodecs.Id
    , message : String
    }


{-| Encode a DismissPullRequestReviewInput into a value that can be used as an argument.
-}
encodeDismissPullRequestReviewInput : DismissPullRequestReviewInput -> Value
encodeDismissPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "message", Encode.string input.message |> Just ) ]


buildDraftPullRequestReviewComment :
    DraftPullRequestReviewCommentRequiredFields
    -> DraftPullRequestReviewComment
buildDraftPullRequestReviewComment required =
    { path = required.path, position = required.position, body = required.body }


type alias DraftPullRequestReviewCommentRequiredFields =
    { path : String
    , position : Int
    , body : String
    }


{-| Type for the DraftPullRequestReviewComment input object.
-}
type alias DraftPullRequestReviewComment =
    { path : String
    , position : Int
    , body : String
    }


{-| Encode a DraftPullRequestReviewComment into a value that can be used as an argument.
-}
encodeDraftPullRequestReviewComment : DraftPullRequestReviewComment -> Value
encodeDraftPullRequestReviewComment input =
    Encode.maybeObject
        [ ( "path", Encode.string input.path |> Just ), ( "position", Encode.int input.position |> Just ), ( "body", Encode.string input.body |> Just ) ]


buildGistOrder :
    GistOrderRequiredFields
    -> GistOrder
buildGistOrder required =
    { field = required.field, direction = required.direction }


type alias GistOrderRequiredFields =
    { field : Github.Enum.GistOrderField.GistOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the GistOrder input object.
-}
type alias GistOrder =
    { field : Github.Enum.GistOrderField.GistOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a GistOrder into a value that can be used as an argument.
-}
encodeGistOrder : GistOrder -> Value
encodeGistOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.GistOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildIssueOrder :
    IssueOrderRequiredFields
    -> IssueOrder
buildIssueOrder required =
    { field = required.field, direction = required.direction }


type alias IssueOrderRequiredFields =
    { field : Github.Enum.IssueOrderField.IssueOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the IssueOrder input object.
-}
type alias IssueOrder =
    { field : Github.Enum.IssueOrderField.IssueOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a IssueOrder into a value that can be used as an argument.
-}
encodeIssueOrder : IssueOrder -> Value
encodeIssueOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.IssueOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLanguageOrder :
    LanguageOrderRequiredFields
    -> LanguageOrder
buildLanguageOrder required =
    { field = required.field, direction = required.direction }


type alias LanguageOrderRequiredFields =
    { field : Github.Enum.LanguageOrderField.LanguageOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the LanguageOrder input object.
-}
type alias LanguageOrder =
    { field : Github.Enum.LanguageOrderField.LanguageOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a LanguageOrder into a value that can be used as an argument.
-}
encodeLanguageOrder : LanguageOrder -> Value
encodeLanguageOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.LanguageOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildLockLockableInput :
    LockLockableInputRequiredFields
    -> (LockLockableInputOptionalFields -> LockLockableInputOptionalFields)
    -> LockLockableInput
buildLockLockableInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, lockReason = Absent }
    in
    { clientMutationId = optionals.clientMutationId, lockableId = required.lockableId, lockReason = optionals.lockReason }


type alias LockLockableInputRequiredFields =
    { lockableId : Github.ScalarCodecs.Id }


type alias LockLockableInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , lockReason : OptionalArgument Github.Enum.LockReason.LockReason
    }


{-| Type for the LockLockableInput input object.
-}
type alias LockLockableInput =
    { clientMutationId : OptionalArgument String
    , lockableId : Github.ScalarCodecs.Id
    , lockReason : OptionalArgument Github.Enum.LockReason.LockReason
    }


{-| Encode a LockLockableInput into a value that can be used as an argument.
-}
encodeLockLockableInput : LockLockableInput -> Value
encodeLockLockableInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "lockableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.lockableId |> Just ), ( "lockReason", Encode.enum Github.Enum.LockReason.toString |> Encode.optional input.lockReason ) ]


buildMilestoneOrder :
    MilestoneOrderRequiredFields
    -> MilestoneOrder
buildMilestoneOrder required =
    { field = required.field, direction = required.direction }


type alias MilestoneOrderRequiredFields =
    { field : Github.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the MilestoneOrder input object.
-}
type alias MilestoneOrder =
    { field : Github.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a MilestoneOrder into a value that can be used as an argument.
-}
encodeMilestoneOrder : MilestoneOrder -> Value
encodeMilestoneOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.MilestoneOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildMoveProjectCardInput :
    MoveProjectCardInputRequiredFields
    -> (MoveProjectCardInputOptionalFields -> MoveProjectCardInputOptionalFields)
    -> MoveProjectCardInput
buildMoveProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, afterCardId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, cardId = required.cardId, columnId = required.columnId, afterCardId = optionals.afterCardId }


type alias MoveProjectCardInputRequiredFields =
    { cardId : Github.ScalarCodecs.Id
    , columnId : Github.ScalarCodecs.Id
    }


type alias MoveProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , afterCardId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Type for the MoveProjectCardInput input object.
-}
type alias MoveProjectCardInput =
    { clientMutationId : OptionalArgument String
    , cardId : Github.ScalarCodecs.Id
    , columnId : Github.ScalarCodecs.Id
    , afterCardId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Encode a MoveProjectCardInput into a value that can be used as an argument.
-}
encodeMoveProjectCardInput : MoveProjectCardInput -> Value
encodeMoveProjectCardInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "cardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.cardId |> Just ), ( "columnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "afterCardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input.afterCardId ) ]


buildMoveProjectColumnInput :
    MoveProjectColumnInputRequiredFields
    -> (MoveProjectColumnInputOptionalFields -> MoveProjectColumnInputOptionalFields)
    -> MoveProjectColumnInput
buildMoveProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, afterColumnId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, columnId = required.columnId, afterColumnId = optionals.afterColumnId }


type alias MoveProjectColumnInputRequiredFields =
    { columnId : Github.ScalarCodecs.Id }


type alias MoveProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , afterColumnId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Type for the MoveProjectColumnInput input object.
-}
type alias MoveProjectColumnInput =
    { clientMutationId : OptionalArgument String
    , columnId : Github.ScalarCodecs.Id
    , afterColumnId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Encode a MoveProjectColumnInput into a value that can be used as an argument.
-}
encodeMoveProjectColumnInput : MoveProjectColumnInput -> Value
encodeMoveProjectColumnInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "columnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.columnId |> Just ), ( "afterColumnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input.afterColumnId ) ]


buildProjectOrder :
    ProjectOrderRequiredFields
    -> ProjectOrder
buildProjectOrder required =
    { field = required.field, direction = required.direction }


type alias ProjectOrderRequiredFields =
    { field : Github.Enum.ProjectOrderField.ProjectOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectOrder input object.
-}
type alias ProjectOrder =
    { field : Github.Enum.ProjectOrderField.ProjectOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectOrder into a value that can be used as an argument.
-}
encodeProjectOrder : ProjectOrder -> Value
encodeProjectOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildReactionOrder :
    ReactionOrderRequiredFields
    -> ReactionOrder
buildReactionOrder required =
    { field = required.field, direction = required.direction }


type alias ReactionOrderRequiredFields =
    { field : Github.Enum.ReactionOrderField.ReactionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReactionOrder input object.
-}
type alias ReactionOrder =
    { field : Github.Enum.ReactionOrderField.ReactionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReactionOrder into a value that can be used as an argument.
-}
encodeReactionOrder : ReactionOrder -> Value
encodeReactionOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ReactionOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRefOrder :
    RefOrderRequiredFields
    -> RefOrder
buildRefOrder required =
    { field = required.field, direction = required.direction }


type alias RefOrderRequiredFields =
    { field : Github.Enum.RefOrderField.RefOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RefOrder input object.
-}
type alias RefOrder =
    { field : Github.Enum.RefOrderField.RefOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RefOrder into a value that can be used as an argument.
-}
encodeRefOrder : RefOrder -> Value
encodeRefOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.RefOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildReleaseOrder :
    ReleaseOrderRequiredFields
    -> ReleaseOrder
buildReleaseOrder required =
    { field = required.field, direction = required.direction }


type alias ReleaseOrderRequiredFields =
    { field : Github.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReleaseOrder input object.
-}
type alias ReleaseOrder =
    { field : Github.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReleaseOrder into a value that can be used as an argument.
-}
encodeReleaseOrder : ReleaseOrder -> Value
encodeReleaseOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ReleaseOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRemoveOutsideCollaboratorInput :
    RemoveOutsideCollaboratorInputRequiredFields
    -> (RemoveOutsideCollaboratorInputOptionalFields -> RemoveOutsideCollaboratorInputOptionalFields)
    -> RemoveOutsideCollaboratorInput
buildRemoveOutsideCollaboratorInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, userId = required.userId, organizationId = required.organizationId }


type alias RemoveOutsideCollaboratorInputRequiredFields =
    { userId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    }


type alias RemoveOutsideCollaboratorInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveOutsideCollaboratorInput input object.
-}
type alias RemoveOutsideCollaboratorInput =
    { clientMutationId : OptionalArgument String
    , userId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    }


{-| Encode a RemoveOutsideCollaboratorInput into a value that can be used as an argument.
-}
encodeRemoveOutsideCollaboratorInput : RemoveOutsideCollaboratorInput -> Value
encodeRemoveOutsideCollaboratorInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "userId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.userId |> Just ), ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.organizationId |> Just ) ]


buildRemoveReactionInput :
    RemoveReactionInputRequiredFields
    -> (RemoveReactionInputOptionalFields -> RemoveReactionInputOptionalFields)
    -> RemoveReactionInput
buildRemoveReactionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, subjectId = required.subjectId, content = required.content }


type alias RemoveReactionInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    }


type alias RemoveReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveReactionInput input object.
-}
type alias RemoveReactionInput =
    { clientMutationId : OptionalArgument String
    , subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    }


{-| Encode a RemoveReactionInput into a value that can be used as an argument.
-}
encodeRemoveReactionInput : RemoveReactionInput -> Value
encodeRemoveReactionInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.subjectId |> Just ), ( "content", Encode.enum Github.Enum.ReactionContent.toString input.content |> Just ) ]


buildRemoveStarInput :
    RemoveStarInputRequiredFields
    -> (RemoveStarInputOptionalFields -> RemoveStarInputOptionalFields)
    -> RemoveStarInput
buildRemoveStarInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, starrableId = required.starrableId }


type alias RemoveStarInputRequiredFields =
    { starrableId : Github.ScalarCodecs.Id }


type alias RemoveStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveStarInput input object.
-}
type alias RemoveStarInput =
    { clientMutationId : OptionalArgument String
    , starrableId : Github.ScalarCodecs.Id
    }


{-| Encode a RemoveStarInput into a value that can be used as an argument.
-}
encodeRemoveStarInput : RemoveStarInput -> Value
encodeRemoveStarInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "starrableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.starrableId |> Just ) ]


buildRepositoryOrder :
    RepositoryOrderRequiredFields
    -> RepositoryOrder
buildRepositoryOrder required =
    { field = required.field, direction = required.direction }


type alias RepositoryOrderRequiredFields =
    { field : Github.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RepositoryOrder input object.
-}
type alias RepositoryOrder =
    { field : Github.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RepositoryOrder into a value that can be used as an argument.
-}
encodeRepositoryOrder : RepositoryOrder -> Value
encodeRepositoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.RepositoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildRequestReviewsInput :
    RequestReviewsInputRequiredFields
    -> (RequestReviewsInputOptionalFields -> RequestReviewsInputOptionalFields)
    -> RequestReviewsInput
buildRequestReviewsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, userIds = Absent, teamIds = Absent, union = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestId = required.pullRequestId, userIds = optionals.userIds, teamIds = optionals.teamIds, union = optionals.union }


type alias RequestReviewsInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias RequestReviewsInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , userIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    }


{-| Type for the RequestReviewsInput input object.
-}
type alias RequestReviewsInput =
    { clientMutationId : OptionalArgument String
    , pullRequestId : Github.ScalarCodecs.Id
    , userIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    }


{-| Encode a RequestReviewsInput into a value that can be used as an argument.
-}
encodeRequestReviewsInput : RequestReviewsInput -> Value
encodeRequestReviewsInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestId |> Just ), ( "userIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.userIds ), ( "teamIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.teamIds ), ( "union", Encode.bool |> Encode.optional input.union ) ]


buildStarOrder :
    StarOrderRequiredFields
    -> StarOrder
buildStarOrder required =
    { field = required.field, direction = required.direction }


type alias StarOrderRequiredFields =
    { field : Github.Enum.StarOrderField.StarOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the StarOrder input object.
-}
type alias StarOrder =
    { field : Github.Enum.StarOrderField.StarOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a StarOrder into a value that can be used as an argument.
-}
encodeStarOrder : StarOrder -> Value
encodeStarOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.StarOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildSubmitPullRequestReviewInput :
    SubmitPullRequestReviewInputRequiredFields
    -> (SubmitPullRequestReviewInputOptionalFields -> SubmitPullRequestReviewInputOptionalFields)
    -> SubmitPullRequestReviewInput
buildSubmitPullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, body = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestReviewId = required.pullRequestReviewId, event = required.event, body = optionals.body }


type alias SubmitPullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , event : Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    }


type alias SubmitPullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , body : OptionalArgument String
    }


{-| Type for the SubmitPullRequestReviewInput input object.
-}
type alias SubmitPullRequestReviewInput =
    { clientMutationId : OptionalArgument String
    , pullRequestReviewId : Github.ScalarCodecs.Id
    , event : Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , body : OptionalArgument String
    }


{-| Encode a SubmitPullRequestReviewInput into a value that can be used as an argument.
-}
encodeSubmitPullRequestReviewInput : SubmitPullRequestReviewInput -> Value
encodeSubmitPullRequestReviewInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "event", Encode.enum Github.Enum.PullRequestReviewEvent.toString input.event |> Just ), ( "body", Encode.string |> Encode.optional input.body ) ]


buildTeamOrder :
    TeamOrderRequiredFields
    -> TeamOrder
buildTeamOrder required =
    { field = required.field, direction = required.direction }


type alias TeamOrderRequiredFields =
    { field : Github.Enum.TeamOrderField.TeamOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamOrder input object.
-}
type alias TeamOrder =
    { field : Github.Enum.TeamOrderField.TeamOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamOrder into a value that can be used as an argument.
-}
encodeTeamOrder : TeamOrder -> Value
encodeTeamOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildTeamRepositoryOrder :
    TeamRepositoryOrderRequiredFields
    -> TeamRepositoryOrder
buildTeamRepositoryOrder required =
    { field = required.field, direction = required.direction }


type alias TeamRepositoryOrderRequiredFields =
    { field : Github.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamRepositoryOrder input object.
-}
type alias TeamRepositoryOrder =
    { field : Github.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamRepositoryOrder into a value that can be used as an argument.
-}
encodeTeamRepositoryOrder : TeamRepositoryOrder -> Value
encodeTeamRepositoryOrder input =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamRepositoryOrderField.toString input.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input.direction |> Just ) ]


buildUpdateProjectCardInput :
    UpdateProjectCardInputRequiredFields
    -> (UpdateProjectCardInputOptionalFields -> UpdateProjectCardInputOptionalFields)
    -> UpdateProjectCardInput
buildUpdateProjectCardInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, projectCardId = required.projectCardId, note = required.note }


type alias UpdateProjectCardInputRequiredFields =
    { projectCardId : Github.ScalarCodecs.Id
    , note : String
    }


type alias UpdateProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateProjectCardInput input object.
-}
type alias UpdateProjectCardInput =
    { clientMutationId : OptionalArgument String
    , projectCardId : Github.ScalarCodecs.Id
    , note : String
    }


{-| Encode a UpdateProjectCardInput into a value that can be used as an argument.
-}
encodeUpdateProjectCardInput : UpdateProjectCardInput -> Value
encodeUpdateProjectCardInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "projectCardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.projectCardId |> Just ), ( "note", Encode.string input.note |> Just ) ]


buildUpdateProjectColumnInput :
    UpdateProjectColumnInputRequiredFields
    -> (UpdateProjectColumnInputOptionalFields -> UpdateProjectColumnInputOptionalFields)
    -> UpdateProjectColumnInput
buildUpdateProjectColumnInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, projectColumnId = required.projectColumnId, name = required.name }


type alias UpdateProjectColumnInputRequiredFields =
    { projectColumnId : Github.ScalarCodecs.Id
    , name : String
    }


type alias UpdateProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateProjectColumnInput input object.
-}
type alias UpdateProjectColumnInput =
    { clientMutationId : OptionalArgument String
    , projectColumnId : Github.ScalarCodecs.Id
    , name : String
    }


{-| Encode a UpdateProjectColumnInput into a value that can be used as an argument.
-}
encodeUpdateProjectColumnInput : UpdateProjectColumnInput -> Value
encodeUpdateProjectColumnInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "projectColumnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.projectColumnId |> Just ), ( "name", Encode.string input.name |> Just ) ]


buildUpdateProjectInput :
    UpdateProjectInputRequiredFields
    -> (UpdateProjectInputOptionalFields -> UpdateProjectInputOptionalFields)
    -> UpdateProjectInput
buildUpdateProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, name = Absent, body = Absent, state = Absent, public = Absent }
    in
    { clientMutationId = optionals.clientMutationId, projectId = required.projectId, name = optionals.name, body = optionals.body, state = optionals.state, public = optionals.public }


type alias UpdateProjectInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id }


type alias UpdateProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Github.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    }


{-| Type for the UpdateProjectInput input object.
-}
type alias UpdateProjectInput =
    { clientMutationId : OptionalArgument String
    , projectId : Github.ScalarCodecs.Id
    , name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Github.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    }


{-| Encode a UpdateProjectInput into a value that can be used as an argument.
-}
encodeUpdateProjectInput : UpdateProjectInput -> Value
encodeUpdateProjectInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.projectId |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "body", Encode.string |> Encode.optional input.body ), ( "state", Encode.enum Github.Enum.ProjectState.toString |> Encode.optional input.state ), ( "public", Encode.bool |> Encode.optional input.public ) ]


buildUpdatePullRequestReviewCommentInput :
    UpdatePullRequestReviewCommentInputRequiredFields
    -> (UpdatePullRequestReviewCommentInputOptionalFields -> UpdatePullRequestReviewCommentInputOptionalFields)
    -> UpdatePullRequestReviewCommentInput
buildUpdatePullRequestReviewCommentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestReviewCommentId = required.pullRequestReviewCommentId, body = required.body }


type alias UpdatePullRequestReviewCommentInputRequiredFields =
    { pullRequestReviewCommentId : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewCommentInput input object.
-}
type alias UpdatePullRequestReviewCommentInput =
    { clientMutationId : OptionalArgument String
    , pullRequestReviewCommentId : Github.ScalarCodecs.Id
    , body : String
    }


{-| Encode a UpdatePullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewCommentInput : UpdatePullRequestReviewCommentInput -> Value
encodeUpdatePullRequestReviewCommentInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestReviewCommentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestReviewCommentId |> Just ), ( "body", Encode.string input.body |> Just ) ]


buildUpdatePullRequestReviewInput :
    UpdatePullRequestReviewInputRequiredFields
    -> (UpdatePullRequestReviewInputOptionalFields -> UpdatePullRequestReviewInputOptionalFields)
    -> UpdatePullRequestReviewInput
buildUpdatePullRequestReviewInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, pullRequestReviewId = required.pullRequestReviewId, body = required.body }


type alias UpdatePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewInput input object.
-}
type alias UpdatePullRequestReviewInput =
    { clientMutationId : OptionalArgument String
    , pullRequestReviewId : Github.ScalarCodecs.Id
    , body : String
    }


{-| Encode a UpdatePullRequestReviewInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewInput : UpdatePullRequestReviewInput -> Value
encodeUpdatePullRequestReviewInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.pullRequestReviewId |> Just ), ( "body", Encode.string input.body |> Just ) ]


buildUpdateSubscriptionInput :
    UpdateSubscriptionInputRequiredFields
    -> (UpdateSubscriptionInputOptionalFields -> UpdateSubscriptionInputOptionalFields)
    -> UpdateSubscriptionInput
buildUpdateSubscriptionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, subscribableId = required.subscribableId, state = required.state }


type alias UpdateSubscriptionInputRequiredFields =
    { subscribableId : Github.ScalarCodecs.Id
    , state : Github.Enum.SubscriptionState.SubscriptionState
    }


type alias UpdateSubscriptionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateSubscriptionInput input object.
-}
type alias UpdateSubscriptionInput =
    { clientMutationId : OptionalArgument String
    , subscribableId : Github.ScalarCodecs.Id
    , state : Github.Enum.SubscriptionState.SubscriptionState
    }


{-| Encode a UpdateSubscriptionInput into a value that can be used as an argument.
-}
encodeUpdateSubscriptionInput : UpdateSubscriptionInput -> Value
encodeUpdateSubscriptionInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "subscribableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.subscribableId |> Just ), ( "state", Encode.enum Github.Enum.SubscriptionState.toString input.state |> Just ) ]


buildUpdateTopicsInput :
    UpdateTopicsInputRequiredFields
    -> (UpdateTopicsInputOptionalFields -> UpdateTopicsInputOptionalFields)
    -> UpdateTopicsInput
buildUpdateTopicsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, repositoryId = required.repositoryId, topicNames = required.topicNames }


type alias UpdateTopicsInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , topicNames : List String
    }


type alias UpdateTopicsInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTopicsInput input object.
-}
type alias UpdateTopicsInput =
    { clientMutationId : OptionalArgument String
    , repositoryId : Github.ScalarCodecs.Id
    , topicNames : List String
    }


{-| Encode a UpdateTopicsInput into a value that can be used as an argument.
-}
encodeUpdateTopicsInput : UpdateTopicsInput -> Value
encodeUpdateTopicsInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input.repositoryId |> Just ), ( "topicNames", (Encode.string |> Encode.list) input.topicNames |> Just ) ]
