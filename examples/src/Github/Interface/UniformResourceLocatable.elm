-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Interface.UniformResourceLocatable exposing (Fragments, fragments, maybeFragments, resourcePath, url)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onBot : SelectionSet decodesTo Github.Object.Bot
    , onCrossReferencedEvent : SelectionSet decodesTo Github.Object.CrossReferencedEvent
    , onIssue : SelectionSet decodesTo Github.Object.Issue
    , onMergedEvent : SelectionSet decodesTo Github.Object.MergedEvent
    , onMilestone : SelectionSet decodesTo Github.Object.Milestone
    , onOrganization : SelectionSet decodesTo Github.Object.Organization
    , onPullRequest : SelectionSet decodesTo Github.Object.PullRequest
    , onPullRequestCommit : SelectionSet decodesTo Github.Object.PullRequestCommit
    , onRelease : SelectionSet decodesTo Github.Object.Release
    , onRepository : SelectionSet decodesTo Github.Object.Repository
    , onRepositoryTopic : SelectionSet decodesTo Github.Object.RepositoryTopic
    , onReviewDismissedEvent : SelectionSet decodesTo Github.Object.ReviewDismissedEvent
    , onUser : SelectionSet decodesTo Github.Object.User
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Github.Interface.UniformResourceLocatable
fragments selections =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Bot" selections.onBot
        , Object.buildFragment "CrossReferencedEvent" selections.onCrossReferencedEvent
        , Object.buildFragment "Issue" selections.onIssue
        , Object.buildFragment "MergedEvent" selections.onMergedEvent
        , Object.buildFragment "Milestone" selections.onMilestone
        , Object.buildFragment "Organization" selections.onOrganization
        , Object.buildFragment "PullRequest" selections.onPullRequest
        , Object.buildFragment "PullRequestCommit" selections.onPullRequestCommit
        , Object.buildFragment "Release" selections.onRelease
        , Object.buildFragment "Repository" selections.onRepository
        , Object.buildFragment "RepositoryTopic" selections.onRepositoryTopic
        , Object.buildFragment "ReviewDismissedEvent" selections.onReviewDismissedEvent
        , Object.buildFragment "User" selections.onUser
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onBot = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCrossReferencedEvent = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onIssue = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onMergedEvent = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onMilestone = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onOrganization = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPullRequest = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPullRequestCommit = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onRelease = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onRepository = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onRepositoryTopic = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onReviewDismissedEvent = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The HTML path to this resource.
-}
resourcePath : SelectionSet Github.Scalar.Uri Github.Interface.UniformResourceLocatable
resourcePath =
    Object.selectionForField "Scalar.Uri" "resourcePath" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Uri)


{-| The URL to this resource.
-}
url : SelectionSet Github.Scalar.Uri Github.Interface.UniformResourceLocatable
url =
    Object.selectionForField "Scalar.Uri" "url" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Uri)
