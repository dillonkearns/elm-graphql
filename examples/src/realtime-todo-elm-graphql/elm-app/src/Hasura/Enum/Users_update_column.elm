-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.Users_update_column exposing (Users_update_column(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "users"

  - Created\_at - column name
  - Id - column name
  - Last\_seen - column name
  - Password - column name
  - Token - column name
  - Username - column name

-}
type Users_update_column
    = Created_at
    | Id
    | Last_seen
    | Password
    | Token
    | Username


list : List Users_update_column
list =
    [ Created_at, Id, Last_seen, Password, Token, Username ]


decoder : Decoder Users_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "created_at" ->
                        Decode.succeed Created_at

                    "id" ->
                        Decode.succeed Id

                    "last_seen" ->
                        Decode.succeed Last_seen

                    "password" ->
                        Decode.succeed Password

                    "token" ->
                        Decode.succeed Token

                    "username" ->
                        Decode.succeed Username

                    _ ->
                        Decode.fail ("Invalid Users_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Users_update_column -> String
toString enum =
    case enum of
        Created_at ->
            "created_at"

        Id ->
            "id"

        Last_seen ->
            "last_seen"

        Password ->
            "password"

        Token ->
            "token"

        Username ->
            "username"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Users_update_column
fromString enumString =
    case enumString of
        "created_at" ->
            Just Created_at

        "id" ->
            Just Id

        "last_seen" ->
            Just Last_seen

        "password" ->
            Just Password

        "token" ->
            Just Token

        "username" ->
            Just Username

        _ ->
            Nothing
